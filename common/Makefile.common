SIM_ROOT ?= $(shell readlink -f "$(CURDIR)/../")

include $(SIM_ROOT)/Makefile.config

DIRECTORIES := ${shell find $(SIM_ROOT)/common -type d -print} \
	$(SIM_ROOT)/include

LIBCARBON_SOURCES = $(foreach dir,$(DIRECTORIES),$(wildcard $(dir)/*.cc)) \
	$(wildcard $(SIM_ROOT)/common/config/*.cpp) \
	$(wildcard $(SIM_ROOT)/common/xcslib/*.cpp)

LIBCARBON_OBJECTS = $(patsubst %.cpp,%.o,$(patsubst %.c,%.o,$(patsubst %.cc,%.o,$(LIBCARBON_SOURCES) ) ) )

LIBXCS_SOURCES = $(foreach dir,$(DIRECTORIES),$(wildcard $(dir)/*.cc)) \
	$(wildcard $(SIM_ROOT)/common/xcslib/*.cpp)

LIBXCS_OBJECTS = $(patsubst %.cpp,%.o,$(patsubst %.c,%.o,$(patsubst %.cc,%.o,$(LIBXCS_SOURCES) ) ) )

INCLUDE_DIRECTORIES = $(DIRECTORIES) $(XED_HOME)/include/xed $(SIM_ROOT)/linux $(SIM_ROOT)/sift $(SIM_ROOT)/decoder_lib $(SIM_ROOT)/common/xcslib

CLEAN=$(findstring clean,$(MAKECMDGOALS))

ifeq ($(SNIPER_TARGET_ARCH),ia32)
  # Add -march=i686 to enable some extra instructions that allow for implementation of 64-bit atomic adds
  CXXFLAGS += -m32 -march=i686 -DTARGET_IA32
  LD_FLAGS += -m32
endif
ifeq ($(SNIPER_TARGET_ARCH),intel64)
  CXXFLAGS += -fPIC -DTARGET_INTEL64
  LD_FLAGS +=
endif

CXXFLAGS += -DPIN_REV=$(shell $(SIM_ROOT)/tools/pinversion.py $(PIN_HOME) | cut -d. -f3)

include $(SIM_ROOT)/Makefile.config

ifneq ($(BOOST_INCLUDE),)
	CPPFLAGS += -I$(BOOST_INCLUDE)
endif

LD_LIBS += -ldecoder -lsift -lxed -L$(SIM_ROOT)/python_kit/$(SNIPER_TARGET_ARCH)/lib -lpython2.7 -lrt -lz -lsqlite3

LD_FLAGS += -L$(SIM_ROOT)/lib -L$(SIM_ROOT)/decoder_lib/ -L$(SIM_ROOT)/sift -L$(XED_HOME)/lib

ifneq ($(SQLITE_PATH),)
	CPPFLAGS += -I$(SQLITE_PATH)/include
	LD_FLAGS += -L$(SQLITE_PATH)/lib
endif

export LD_LIBRARY_PATH := $(SIM_ROOT)/lib:$(LD_LIBRARY_PATH)

# Include paths
CPPFLAGS+=$(foreach dir,$(INCLUDE_DIRECTORIES),-I$(dir)) \
          -I$(SIM_ROOT)/python_kit/$(SNIPER_TARGET_ARCH)/include/python2.7 \
          -I$(SIM_ROOT)/capstone/include -w

CXXFLAGS+=-c \
          -Wall -Wextra -Wcast-align -Wno-unused-parameter -Wno-unknown-pragmas -std=c++11 -fno-strict-aliasing $(OPT_CFLAGS) #-Werror	  
#CXXFLAGS+=-I$(SIM_ROOT)/rv8/src
#CXXFLAGS+=-I$(SIM_ROOT)/rv8

######################################################################
# XCS lib specific defines
EXTCXXFLAGS := -I. $(CXXFLAGS)
OPT = -g

# INPUTS: binary_inputs, real_inputs
# ACTIONS: dummy_action, boolean_action, binary_action, integer_action
# CONDITIONS: ternary_condition, real_interval_condition
# ENVIRONMENTS: multiplexer_env, woods_env, woods2_env, real_functions_env

INPUTS = real_inputs
ACTIONS = integer_action
CONDITIONS = real_interval_condition
CLASSIFIER = xcs
MODEL = xcs
ENVIRONMENT = multiplexer_env
EXPERIMENT_MANAGER = experiment_mgr

__DET_INCLUDE__="$(INPUTS).hpp"
__COND_INCLUDE__="$(CONDITIONS).hpp"
__ACT_INCLUDE__="$(ACTIONS).hpp"
__CLS_INCLUDE__="$(CLASSIFIER)_classifier.hpp"
__MOD_INCLUDE__="$(CLASSIFIER)_classifier_system.hpp"

EXTSYS_INCLUDE = \
	-D __DET_INCLUDE__='"$(INPUTS).hpp"' \
	-D __COND_INCLUDE__='"$(CONDITIONS).hpp"' \
	-D __ACT_INCLUDE__='"$(ACTIONS).hpp"' \
	-D __CLS_INCLUDE__='"$(CLASSIFIER)_classifier.hpp"' \
	-D __MOD_INCLUDE__='"$(MODEL)_classifier_system.hpp"' 
	
ENV_INCLUDE = \
	-D __ENV_INCLUDE__='"$(ENVIRONMENT).hpp"' 

ENV_CLASSDEF = \
	-D __ENVIRONMENT__=$(ENVIRONMENT)
	
EXTSYS_CLASSDEF = \
	-D __INPUTS__=$(INPUTS) \
	-D __ACTION__=$(ACTIONS) \
	-D __CONDITION__=$(CONDITIONS) \
	-D __CLASSIFIER__=$(CLASSIFIER)_classifier \
	-D __MODEL__=$(MODEL)_classifier_system

CXXFLAGS += $(EXTSYS_CLASSDEF) $(EXTSYS_INCLUDE) $(ENV_CLASSDEF) $(ENV_INCLUDE) -w
#override CXXFLAGS := $(EXTCXXFLAGS) $(OPT) $(EXTSYS_CLASSDEF) $(ENV_CLASSDEF) $(EXTSYS_INCLUDE) $(ENV_INCLUDE) 
######################################################################

%.h %.hh %.hpp:
	@echo >&2
	@echo "        Unable to find $@" >&2
	@echo "        You may want to try running 'make empty_deps'" >&2
	@echo >&2
	@false



# Build rules for dependency generation
%.d: %.cpp
	$(_MSG) '[DEP   ]' $(subst $(shell readlink -f $(SIM_ROOT))/,,$(shell readlink -f $@))
	$(_CMD) $(CXX) -MM -MG $(CPPFLAGS) $(CXXFLAGS) $< | sed -n "H;$$ {g;s@.*:\(.*\)@$*.o $@: \$$\(wildcard\1\)@;p}" >$@

%.d: %.cc
	$(_MSG) '[DEP   ]' $(subst $(shell readlink -f $(SIM_ROOT))/,,$(shell readlink -f $@))
	$(_CMD) $(CXX) -MM -MG $(CPPFLAGS) $(CXXFLAGS) $< | sed -n "H;$$ {g;s@.*:\(.*\)@$*.o $@: \$$\(wildcard\1\)@;p}" >$@

%.d: %.c
	$(_MSG) '[DEP   ]' $(subst $(shell readlink -f $(SIM_ROOT))/,,$(shell readlink -f $@))
	$(_CMD) $(CC) -MM -MG $(CPPFLAGS) $(CFLAGS) $< | sed -n "H;$$ {g;s@.*:\(.*\)@$*.o $@: \$$\(wildcard\1\)@;p}" >$@

# Build rules for object generation
%.o: %.cpp
	$(_MSG) '[CXX   ]' $(subst $(shell readlink -f $(SIM_ROOT))/,,$(shell readlink -f $@))
	$(_CMD) $(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@

%.o : %.cc
	$(_MSG) '[CXX   ]' $(subst $(shell readlink -f $(SIM_ROOT))/,,$(shell readlink -f $@))
	$(_CMD) $(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@

%.o : %.c
	$(_MSG) '[CC    ]' $(subst $(shell readlink -f $(SIM_ROOT))/,,$(shell readlink -f $@))
	$(_CMD) $(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@
